from django.shortcuts import render
from chat.models import Chat
from user.models import User
from music.models import Song, Artist, Album
from django.db.models import Q
from django.views.decorators.csrf import csrf_exempt
from rest_framework.decorators import api_view
from rest_framework.response import Response
import random

@api_view(['GET'])
def chat_history(request):
    if request.user.is_authenticated:
        chats = Chat.objects.filter(user=request.user).order_by('timestamp')
    else:
        chats = Chat.objects.all().order_by('timestamp')[:50]

    chat_data = []
    for chat in chats:
        # Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
        chat_data.append({
            "sender": "user",
            "text": chat.message,
            "timestamp": chat.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
        })

        # Ph·∫£n h·ªìi t·ª´ AI n·∫øu c√≥
        if chat.response:
            chat_data.append({
                "sender": "bot",
                "text": chat.response,
                "timestamp": chat.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
            })

    return Response({"chat_history": chat_data})
@csrf_exempt
@api_view(['POST'])
def chat(request):
    if request.method != "POST":
        return Response({"response": "Method not allowed"}, status=405)
    data = request.data
    message = data.get("message", "").lower()
    song_id = data.get("song_id", None)
    isPlaying = data.get("isPlaying", False)
    # Initialize user_id as None for anonymous users
    user_id = request.user.id if request.user.is_authenticated else None
    def create_chat_record(response_text):
        return Chat.objects.create(
            user_id=user_id,
            message=message,
            response=response_text
        )
    # üîé Find songs by artist
    if "ph√°t b√†i c·ªßa " in message:
        artist_name = message.replace("ph√°t b√†i c·ªßa ", "").strip()
        artist = Artist.objects.filter(name__icontains=artist_name).first()
        
        if not artist:
            create_chat_record(f"Kh√¥ng t√¨m th·∫•y ngh·ªá sƒ©: {artist_name}")
            return Response({"response": f"Kh√¥ng t√¨m th·∫•y ngh·ªá sƒ©: {artist_name}"})
        songs = Song.objects.filter(artist=artist).order_by("id")[:5]
        if not songs.exists():
            create_chat_record(f"Ngh·ªá sƒ© {artist_name} kh√¥ng c√≥ b√†i h√°t n√†o!")
            return Response({"response": f"Ngh·ªá sƒ© {artist_name} kh√¥ng c√≥ b√†i h√°t n√†o!"})
        song_list = [{
            "id": song.id,
            "title": song.title,
            "artist": song.artist.name,
            "album": song.album.title if song.album else None,
            "audio_file": song.audio_file.url,
            "video_file": song.video_file.url if song.video_file else None,
            "duration": str(song.duration),
            "lyrics": song.lyrics if song.lyrics else None,
        } for song in songs]
        create_chat_record(f"ƒêang ph√°t c√°c b√†i h√°t c·ªßa {artist_name}!")
        return Response({
            "response": f"ƒêang ph√°t c√°c b√†i h√°t c·ªßa {artist_name}!",
            "song": song_list,
        })
    # What song is currently playing?
    elif message.startswith("b√†i ƒëang ph√°t l√† b√†i g√¨"):
        if not (song_id or song_id == 0):
            create_chat_record("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!")
            return Response({"response": "Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!"})
        
        song_id = int(song_id)
        song = Song.objects.filter(id=song_id).first()
        
        if not song:
            create_chat_record("Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o!")
            return Response({"response": "Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o!"})
        
        create_chat_record(f"B√†i ƒëang ph√°t: {song.title} - {song.artist.name}")
        return Response({
            "response": f"B√†i ƒëang ph√°t: {song.title} - {song.artist.name}"
        })

    # Play songs in artist's album
    elif message.startswith("ph√°t b√†i trong album "):
        song_title = message.replace("ph√°t b√†i trong album", "").strip()
        parts = song_title.split(" c·ªßa ")
        album_title = parts[0].strip()
        artist_name = parts[1].strip() if len(parts) == 2 else ""
        
        if not artist_name:
            create_chat_record("Vui l√≤ng ch·ªâ ƒë·ªãnh ngh·ªá sƒ©!")
            return Response({"response": "Vui l√≤ng ch·ªâ ƒë·ªãnh ngh·ªá sƒ©!"})
        
        artist = Artist.objects.filter(name__icontains=artist_name).first()
        if not artist:
            create_chat_record(f"Kh√¥ng t√¨m th·∫•y ngh·ªá sƒ©: {artist_name}")
            return Response({"response": f"Kh√¥ng t√¨m th·∫•y ngh·ªá sƒ©: {artist_name}"})
        
        album = Album.objects.filter(
            Q(title__icontains=album_title) & Q(artist=artist)
        ).first()
        
        if not album:
            create_chat_record(f"Kh√¥ng t√¨m th·∫•y album {album_title} c·ªßa ngh·ªá sƒ© {artist_name}")
            return Response({"response": f"Kh√¥ng t√¨m th·∫•y album {album_title} c·ªßa ngh·ªá sƒ© {artist_name}"})
        
        songs = Song.objects.filter(album=album).order_by("id")[:5]
        if not songs.exists():
            create_chat_record(f"Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o trong album {album_title}!")
            return Response({"response": f"Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o trong album {album_title}!"})
        
        song_list = [{
            "id": song.id,
            "title": song.title,
            "artist": song.artist.name,
            "album": song.album.title if song.album else None,
            "audio_file": song.audio_file.url,
            "video_file": song.video_file.url if song.video_file else None,
            "duration": str(song.duration),
            "lyrics": song.lyrics if song.lyrics else None,
        } for song in songs]
        
        create_chat_record(f"ƒêang ph√°t c√°c b√†i h√°t trong album {album_title} c·ªßa {artist_name}!")
        return Response({
            "response": f"ƒêang ph√°t c√°c b√†i h√°t trong album {album_title} c·ªßa {artist_name}!",
            "song": song_list,
        })

    # Play specific song by artist
    elif message.startswith("ph√°t b√†i "):
        song_title = message.replace("ph√°t b√†i", "").strip()
        parts = song_title.split(" c·ªßa ")
        song_title = parts[0].strip()
        artist_name = parts[1].strip() if len(parts) == 2 else ""
        
        if not artist_name:
            create_chat_record("Vui l√≤ng ch·ªâ ƒë·ªãnh ngh·ªá sƒ©!")
            return Response({"response": "Vui l√≤ng ch·ªâ ƒë·ªãnh ngh·ªá sƒ©!"})
        
        artist = Artist.objects.filter(name__icontains=artist_name).first()
        if not artist:
            create_chat_record(f"Kh√¥ng t√¨m th·∫•y ngh·ªá sƒ©: {artist_name}")
            return Response({"response": f"Kh√¥ng t√¨m th·∫•y ngh·ªá sƒ©: {artist_name}"})
        
        song = Song.objects.filter(
            Q(title__icontains=song_title) & Q(artist=artist)
        ).first()
        
        if not song:
            create_chat_record("Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†y c·ªßa ngh·ªá sƒ©!")
            return Response({"response": "Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†y c·ªßa ngh·ªá sƒ©!"})
        
        create_chat_record(f"ƒêang ph√°t: {song.title} - {song.artist.name}")
        return Response({
            "response": f"ƒêang ph√°t: {song.title} - {song.artist.name}",
            "song": {
                "id": song.id,
                "title": song.title,
                "artist": song.artist.name,
                "album": song.album.title if song.album else None,
                "audio_file": song.audio_file.url,
                "video_file": song.video_file.url if song.video_file else None,
                "duration": str(song.duration),
                "lyrics": song.lyrics if song.lyrics else None,
            }
        })

    # Skip to next song
    elif message == "chuy·ªÉn b√†i h√°t ti·∫øp theo":
        if not (song_id or song_id == 0):
            next_song = random.choice(Song.objects.all())
        else:
            song_id = int(song_id)
            next_song = Song.objects.filter(id__icontains=song_id).order_by("id").first()
        
        if not next_song:
            create_chat_record("Kh√¥ng th·ªÉ chuy·ªÉn b√†i!")
            return Response({"response": "Kh√¥ng th·ªÉ chuy·ªÉn b√†i!"}, status=400)
        
        create_chat_record(f"ƒê√£ chuy·ªÉn sang b√†i h√°t ti·∫øp theo: {next_song.title} - {next_song.artist.name}")
        return Response({
            "response": f"ƒê√£ chuy·ªÉn sang b√†i h√°t ti·∫øp theo: {next_song.title} - {next_song.artist.name}",
            "song": {
                "id": next_song.id,
                "title": next_song.title,
                "artist": next_song.artist.name,
                "album": next_song.album.title if next_song.album else None,
                "audio_file": next_song.audio_file.url,
                "video_file": next_song.video_file.url if next_song.video_file else None,
                "duration": str(next_song.duration),
                "lyrics": next_song.lyrics if next_song.lyrics else None,
            },
        })

    # Go to previous song
    elif message == "quay l·∫°i b√†i tr∆∞·ªõc":
        if not (song_id or song_id == 0):
            prev_song = random.choice(Song.objects.all())
        else:
            song_id = int(song_id)
            prev_song = Song.objects.filter(id__icontains=song_id).order_by("id").first()
        
        if not prev_song:
            create_chat_record("Kh√¥ng th·ªÉ quay l·∫°i b√†i tr∆∞·ªõc!")
            return Response({"response": "Kh√¥ng th·ªÉ quay l·∫°i b√†i tr∆∞·ªõc!"}, status=400)
        
        create_chat_record(f"ƒê√£ chuy·ªÉn v·ªÅ b√†i h√°t tr∆∞·ªõc: {prev_song.title} - {prev_song.artist.name}")
        return Response({
            "response": f"ƒê√£ chuy·ªÉn v·ªÅ b√†i h√°t tr∆∞·ªõc: {prev_song.title} - {prev_song.artist.name}",
            "song": {
                "id": prev_song.id,
                "title": prev_song.title,
                "artist": prev_song.artist.name,
                "album": prev_song.album.title if prev_song.album else None,
                "audio_file": prev_song.audio_file.url,
                "video_file": prev_song.video_file.url if prev_song.video_file else None,
                "duration": str(prev_song.duration),
                "lyrics": prev_song.lyrics if prev_song.lyrics else None,
            },
        })

    # Resume playback
    elif message == "ti·∫øp t·ª•c ph√°t":
        if not (song_id or song_id == 0):
            create_chat_record("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ ti·∫øp t·ª•c.")
            return Response({"response": "Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ ti·∫øp t·ª•c."})
        
        song = Song.objects.filter(id=song_id).first()
        if not song:
            create_chat_record("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ ti·∫øp t·ª•c.")
            return Response({"response": "Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ ti·∫øp t·ª•c."})
        if(isPlaying == True):
            create_chat_record("B√†i h√°t ƒë√£ ph√°t r·ªìi!")
            return Response({"response": "B√†i h√°t ƒë√£ ph√°t r·ªìi!"})
        create_chat_record(f"Ti·∫øp t·ª•c ph√°t b√†i h√°t: {song.title} - {song.artist.name}")
        return Response({
            "response": f"Ti·∫øp t·ª•c ph√°t b√†i h√°t: {song.title} - {song.artist.name}",
            "action": "resume"
        })

    # Pause playback
    elif message == "t·∫°m d·ª´ng ph√°t":
        if not song_id:
            create_chat_record("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ t·∫°m d·ª´ng.")
            return Response({"response": "Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ t·∫°m d·ª´ng."})
        
        song = Song.objects.filter(id=song_id).first()
        if not song:
            create_chat_record("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ t·∫°m d·ª´ng")
            return Response({"response": "Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ t·∫°m d·ª´ng"})
        if(isPlaying == False):
            create_chat_record("B√†i h√°t ƒë√£ t·∫°m d·ª´ng r·ªìi!")
            return Response({"response": "B√†i h√°t ƒë√£ t·∫°m d·ª´ng r·ªìi!"})
        create_chat_record(f"ƒê√£ t·∫°m d·ª´ng b√†i h√°t: {song.title} - {song.artist.name}")
        return Response({
            "response": f"ƒê√£ t·∫°m d·ª´ng b√†i h√°t: {song.title} - {song.artist.name}",
            "action": "pause"
        })

    create_chat_record("Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n.")
    return Response({"response": "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n."})